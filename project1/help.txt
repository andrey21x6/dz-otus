
   *** Logstash ***
   
systemctl restart logstash
systemctl status logstash

# Проверить конфигурацию logstash
/usr/share/logstash/bin/logstash --path.settings /etc/logstash -t

	[2023-02-11T12:08:12,887][INFO ][logstash.javapipeline    ] Pipeline `nginx` is configured with `pipeline.ecs_compatibility: v8` setting. All plugins in this pipeline will default to `ecs_compatibility => v8` unless explicitly configured otherwise.
	[2023-02-11T12:08:13,956][INFO ][logstash.javapipeline    ] Pipeline `backend2` is configured with `pipeline.ecs_compatibility: v8` setting. All plugins in this pipeline will default to `ecs_compatibility => v8` unless explicitly configured otherwise.
	[2023-02-11T12:08:14,980][INFO ][logstash.javapipeline    ] Pipeline `database2` is configured with `pipeline.ecs_compatibility: v8` setting. All plugins in this pipeline will default to `ecs_compatibility => v8` unless explicitly configured otherwise.
	Configuration OK
	[2023-02-11T12:08:14,980][INFO ][logstash.runner          ] Using config.test_and_exit mode. Config Validation Result: OK. Exiting Logstash

==================================================================================================================================================

   *** elasticsearch ***
   
systemctl restart elasticsearch
systemctl status elasticsearch



/usr/lib/systemd/system/elasticsearch.service
	TimeoutStartSec=75
	TimeoutStartSec=150



#curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic https://127.0.0.1:9200
#curl -X GET --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic https://127.0.0.1:9200
#curl -X PUT --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic https://127.0.0.1:9200
curl -XPUT --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic -H 'Content-Type: application/json' "https://127.0.0.1:9200/blog3/_doc/1?pretty" -d'
{
  "title": "Веселые котята",
  "content": "<p>Смешная история про котят<p>",
  "tags": [
    "котята",
    "смешная история"
  ],
  "published_at": "2014-09-12T20:44:42+00:00"
}'



curl -XPOST --cacert '/etc/elasticsearch/certs/http_ca.crt' -u 'elastic' -H 'Content-Type: application/json' 'https://127.0.0.1:9200/blog2/_doc/2?pretty' -d'
{
  "title": "Веселые котята",
  "content": "<p>Смешная история про котят<p>",
  "tags": [
    "котята",
    "смешная история"
  ],
  "published_at": "2014-09-12T20:44:42+00:00"
}'



POST /users/_doc
{ "first_name": "Rishikesh", "last_name": "Agrawani", "age": 29}

=================================================================================================================================================

   *** Kibana ***
   
systemctl restart kibana
systemctl status kibana

=================================================================================================================================================

   *** Filebeat ***

systemctl restart filebeat
systemctl status filebeat

Проверка конфигурации Filebeat:
filebeat test config

----------------------------------------

filebeat.inputs:
- type: log
  enabled: true
  paths:
      #- /var/log/nginx/*-access.log
      - /var/log/nginx/access.log
  fields:
    type: nginx_access
    #service: nginx_access
  fields_under_root: true
  scan_frequency: 5s

- type: log
  enabled: true
  paths:
      #- /var/log/nginx/*-error.log
      - /var/log/nginx/error.log
  fields:
    type: nginx_error
    #service: nginx_access
  fields_under_root: true
  scan_frequency: 5s

output.logstash:
  hosts: ["192.168.90.17:5044"]

xpack.monitoring:
  #enabled: true
  enabled: false
  elasticsearch:
    hosts: ["http://192.168.90.17:9200"]


----------------------------------------

filebeat.inputs:
- input_type:     log
  enable:         true
  paths:
    - /var/log/nginx/*.log
  exclude_files:  ['\.gz$']

output.logstash:
  hosts:          ["192.168.11.103:5044"]
  
----------------------------------------

filebeat.prospectors:
- input_type: log
  paths:
    - /var/log/nginx/access.log*
    - /var/log/nginx/error.log*
  exclude_files: [".gz$"]
  multiline:
    pattern: "^\\s"
    match: after
	
output.logstash:
  hosts: ["192.168.168.110:5044"]
  
----------------------------------------

filebeat.prospectors:
- input_type: log
  paths:
    - /tmp/elk-example.log
  fields:
    app_name: elk-sample-app
  fields_under_root: true
  multiline.pattern: '^[[:space:]]'
  multiline.negate: false
  multiline.match: after

- input_type: log
  paths:
    - /tmp/pg.log
  fields:
    app_name: postgres
  fields_under_root: true
  multiline.pattern: '^[[:space:]]'
  multiline.negate: false
  multiline.match: after

output.logstash:
  hosts: logstash-mutator:5044
  
----------------------------------------

filebeat.inputs:
  - type: docker
    containers:
      path: "/usr/share/dockerlogs/data"
      stream: "stdout"
      ids:
        - "*"
      cri.parse_flags: true
      combine_partial: true
      exclude_files: ['\.gz$']
 
processors:
  - add_docker_metadata:
      host: "unix:///var/run/docker.sock"
 
filebeat.config.modules:
  path: ${path.config}/modules.d/*.yml
  reload.enabled: false
 
output.logstash:
  hosts: ["127.0.0.1:5044"]
 
log files:
logging.level: error
logging.to_files: false
logging.to_syslog: false
loggins.metrice.enabled: false
logging.files:
  path: /var/log/filebeat
  name: filebeat
  keepfiles: 7
  permissions: 0644
ssl.verification_mode: none

----------------------------------------

filebeat:
  prospectors:
    - paths:
        - /var/log/httpd/access_log
      input_type: log
      document_type: apache
      fields:
        tags: ["mytag"]
      fields_under_root: true

=================================================================================================================================================

   *** nginx ***

systemctl restart nginx
systemctl status nginx

nano /etc/nginx/nginx.conf
nano /usr/share/nginx/html/index.html

# Проверить разрешение в SELinux на обратное проксирование
getsebool httpd_can_network_connect



#echo ""
#echo " *** Скачивание filebeat ***"
#echo ""
#curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-8.5.2-x86_64.rpm
#rpm -ivh ~/filebeat-8.6.1-x86_64.rpm

================================================================================================================================================

   *** backend ***
   
nano /usr/share/nginx/html/index.php

getsebool httpd_can_network_connect

================================================================================================================================================

   *** database ***
   
systemctl restart mariadb
systemctl status mariadb


mysql -e 'start slave'
mysql -e 'stop slave'

mysql -e 'SHOW MASTER STATUS \G'
mysql -e 'SHOW SLAVE STATUS \G'

mysql -h 192.168.90.15 -e 'stop slave'
mysql -h 192.168.90.16 -e 'stop slave'

mysql -h 192.168.90.15 -e 'start slave'
mysql -h 192.168.90.16 -e 'start slave'

mysql -h 192.168.90.15 -e 'SHOW MASTER STATUS \G'
mysql -h 192.168.90.15 -e 'SHOW SLAVE STATUS \G'



# Запуск утилиты настройки безопасности mariadb
/usr/bin/mysql_secure_installation

# Включить доступ к MariaDB с любых хостов (root)
mysql -uroot -p
	GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '12345678';
	
mysql -h 127.0.0.1 -uroot -p123456 \
  "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '12345678';" \
  exit



mysql -u root -p123456

show databases;
use mysql;
show tables;

Database changed

CREATE TABLE table1
(
    id INT,
    name VARCHAR(255)
);



CREATE DATABASE project1;
mysql -u root -p123456 project1 < /home/vagrant/project1_2.sql
mysqldump -u root -p123456 project1 text_entries > project1_2.sql

USE project1;
show tables;

text_entries

---------------------------------------------------------------------------

crontab <<EOF
00 1 * * * /home/vagrant/backup.sh
EOF

echo "00 1 * * * /home/vagrant/backup.sh" |sudo tee /etc/crond.d/backup

(crontab -l; echo "00 1 * * * /home/vagrant/backup.sh") | sort -u | crontab -

# Ежедневно в 07:00 перезагрузка сервера !!!
00 1 * * * /home/vagrant/backup.sh

---------------------------------------------------------------------------

1.

nano /etc/my.cnf.d/mariadb-server.cnf
	server-id = 1
	log_bin = /var/log/mariadb/mariadb-bin.log

systemctl restart mariadb
systemctl status mariadb

mysql -u root -p123456
GRANT replication slave ON *.* TO "replicatuser"@"192.168.90.15" IDENTIFIED BY "passuser";

SHOW MASTER STATUS \G
	File: mariadb-bin.000001
    Position: 897
	
change master to master_host = "192.168.90.15", master_user = "replicatuser", master_password = "passuser", master_log_file = "mariadb-bin.000001", master_log_pos = 1825;
start slave;
	
2.

nano /etc/my.cnf.d/mariadb-server.cnf
	server-id = 2
	log_bin = /var/log/mariadb/mariadb-bin.log

systemctl restart mariadb
systemctl status mariadb

mysql -u root -p123456
GRANT replication slave ON *.* TO "replicatuser"@"192.168.90.14" IDENTIFIED BY "passuser";

SHOW MASTER STATUS \G
	File: mariadb-bin.000001
    Position: 1825

change master to master_host = "192.168.90.14", master_user = "replicatuser", master_password = "passuser", master_log_file = "mariadb-bin.000001", master_log_pos = 897;
start slave;

-------------------------------------------------------------------------------

mysql -h 127.0.0.1 -u root -p123456 -e 'SHOW MASTER STATUS \G' | grep 'Position:';
mysql -h 127.0.0.1 -u root -p123456 -e 'SHOW MASTER STATUS \G' | grep 'File:';

STR=`mysql -h 127.0.0.1 -u root -p123456 -e 'SHOW MASTER STATUS \G' | grep 'Position';` ; eval $(echo $STR | sed 's:^:V1=":; /Position: / s::";V2=": ;s:$:":') ; echo $V2
STR=`mysql -h 127.0.0.1 -u root -p123456 -e 'SHOW MASTER STATUS \G' | grep 'File';` ; eval $(echo $STR | sed 's:^:V1=":; /File: / s::";V2=": ;s:$:":') ; echo $V2



bind-address=0.0.0.0
server-id = 1
log_bin = /var/log/mariadb/mariadb-bin.log




# Для настройки репликации master-master, логин: replicatuser, пароль: passuser (IP 192.168.90.14 второй БД)
mysql -h 127.0.0.1 -uroot -p123456 <<EOF
GRANT replication slave ON *.* TO "replicatuser"@"192.168.90.15" IDENTIFIED BY "passuser";
change master to master_host = "192.168.90.15", master_user = "replicatuser", master_password = "passuser", master_log_file = "${V4}", master_log_pos = ${V2};
start slave;
EOF

------------------------------------------------------------------------

1.

STR=`mysql -h 192.168.90.15 -u root -p123456 -e 'SHOW MASTER STATUS \G' | grep 'Position';` ; eval $(echo $STR | sed 's:^:V1=":; /Position: / s::";V2=": ;s:$:":')
STR=`mysql -h 192.168.90.15 -u root -p123456 -e 'SHOW MASTER STATUS \G' | grep 'File';` ; eval $(echo $STR | sed 's:^:V3=":; /File: / s::";V4=": ;s:$:":')
mysql -h 192.168.90.14 -u root -p123456 -e 'GRANT replication slave ON *.* TO "replicatuser"@"192.168.90.15" IDENTIFIED BY "passuser"'
mysql -h 192.168.90.14 -u root -p123456 -e 'change master to master_host = "192.168.90.15", master_user = "replicatuser", master_password = "passuser", master_log_file = "$V4", master_log_pos = '$V2''
mysql -h 192.168.90.14 -u root -p123456 -e 'start slave'

2.

STR=`mysql -h 192.168.90.14 -u root -p123456 -e 'SHOW MASTER STATUS \G' | grep 'Position';` ; eval $(echo $STR | sed 's:^:V1=":; /Position: / s::";V2=": ;s:$:":')
STR=`mysql -h 192.168.90.14 -u root -p123456 -e 'SHOW MASTER STATUS \G' | grep 'File';` ; eval $(echo $STR | sed 's:^:V3=":; /File: / s::";V4=": ;s:$:":')
mysql -h 192.168.90.15 -u root -p123456 -e 'GRANT replication slave ON *.* TO "replicatuser"@"192.168.90.14" IDENTIFIED BY "passuser"'
mysql -h 192.168.90.15 -u root -p123456 -e 'change master to master_host = "192.168.90.14", master_user = "replicatuser", master_password = "passuser", master_log_file = "$V4", master_log_pos = '$V2''
mysql -h 192.168.90.15 -u root -p123456 -e 'start slave'

================================================================================================================================================



#!/bin/bash

#apt install fping

pingOtvet=`fping 192.168.90.16`

if [ "$pingOtvet" = "192.168.90.16 is alive" ]; then
	echo "OK"
else
	echo "ERROR"
fi
